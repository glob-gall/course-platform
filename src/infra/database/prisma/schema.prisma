// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  STUDENT
  COURSE_OWNER
  ADMIN
}

model User {
  id       String @id @default(uuid())
  name     String
  email    String @unique
  password String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  role    UserRole     @default(STUDENT)
  courses UserCourse[]
}

model UserCourse {
  id String @id @default(uuid())

  User   User   @relation(fields: [userId], references: [id])
  userId String

  progress SectionProgress[]
}

model SectionProgress {
  id String @id @default(uuid())

  section   Section @relation(fields: [sectionId], references: [id])
  sectionId String

  progress     SectionItemProgress[]
  UserCourse   UserCourse            @relation(fields: [userCourseId], references: [id])
  userCourseId String
}

model SectionItemProgress {
  id                String           @id @default(uuid())
  sectionItem       SectionItem      @relation(fields: [sectionItemId], references: [id])
  sectionItemId     String
  concluded         Boolean
  SectionProgress   SectionProgress? @relation(fields: [sectionProgressId], references: [id])
  sectionProgressId String
}

model Course {
  id          String @id @default(uuid())
  title       String
  slug        String @unique
  description String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  sections Section[]
}

model Section {
  id          String @id @default(uuid())
  title       String
  description String
  Course      Course @relation(fields: [courseId], references: [id])
  courseId    String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  sectionItems    SectionItem[]
  SectionProgress SectionProgress[]
}

model SectionItem {
  id                  String                @id @default(uuid())
  title               String?
  description         String?
  Section             Section               @relation(fields: [sectionId], references: [id])
  sectionId           String
  SectionItemProgress SectionItemProgress[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  lecture   Lecture? @relation(fields: [lectureId], references: [id])
  quizz     Quizz?   @relation(fields: [quizzId], references: [id])
  lectureId String?
  quizzId   String?
}

model Lecture {
  id               String  @id @default(uuid())
  title            String
  description      String?
  videoURL         String?
  audioURL         String?
  externalResource String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  SectionItem SectionItem[]
}

model Quizz {
  id          String  @id @default(uuid())
  title       String
  description String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  SectionItem SectionItem[]
  questions   Question[]
}

model Question {
  id          String  @id @default(uuid())
  title       String
  description String?

  videoURL         String?
  imageURL         String?
  audioURL         String?
  externalResource String?

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  answers Answer[]
  Quizz   Quizz    @relation(fields: [quizzId], references: [id])
  quizzId String
}

model Answer {
  id          String  @id @default(uuid())
  description String?

  videoURL         String?
  imageURL         String?
  audioURL         String?
  externalResource String?
  isCorrect        Boolean

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  Question   Question @relation(fields: [questionId], references: [id])
  questionId String
}
